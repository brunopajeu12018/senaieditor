@page "/"

<PageTitle>Home</PageTitle>

@using System.ComponentModel.DataAnnotations

<style>
    .login-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f4f4f4;
    }

    .login-box {
        background: #fff;
        padding: 36px 28px 28px 28px;
        border-radius: 12px;
        box-shadow: 0 4px 24px rgba(0,0,0,0.13);
        width: 350px;
        text-align: center;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .senai-logo {
        width: 90px;
        margin-bottom: 18px;
    }

    .login-title {
        font-weight: 600;
        color: #222;
        margin-bottom: 22px;
        font-size: 1.5em;
    }

    .login-input {
        width: 100%;
        padding: 12px;
        margin-bottom: 14px;
        border-radius: 6px;
        border: 1px solid #bfc9d1;
        font-size: 1.05em;
        box-shadow: none;
    }

    .login-btn {
        width: 100%;
        background: #0a3d91;
        color: #fff;
        font-weight: bold;
        border-radius: 6px;
        border: none;
        height: 44px;
        font-size: 1.08em;
        margin-top: 6px;
        transition: background 0.2s;
    }

        .login-btn:hover {
            background: #003366;
        }

    .support-link {
        display: block;
        margin-top: 15px;
        color: #004c97;
        text-decoration: underline;
        font-size: 0.95em;
    }
    /* Mantém o restante do seu CSS para o dashboard */
    .dashboard-container {
        min-height: 100vh;
        background-color: #f0f0f0;
        padding: 40px 0;
    }

    .dashboard-box {
        background-color: white;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0,0,0,0.2);
        width: 90%;
        max-width: 900px;
        margin: 0 auto;
    }

    .dashboard-cards {
        display: flex;
        gap: 20px;
        margin-bottom: 30px;
        flex-wrap: wrap;
        justify-content: center;
    }

    .dashboard-card {
        background: #e3eaf4;
        border-radius: 8px;
        padding: 20px;
        min-width: 180px;
        text-align: center;
        box-shadow: 0 0 8px rgba(0,0,0,0.08);
        flex: 1 1 180px;
    }

    .docentes-table {
        width: 100%;
        margin-top: 20px;
        border-collapse: collapse;
    }

        .docentes-table th, .docentes-table td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: left;
        }

        .docentes-table th {
            background: #f5f5f5;
        }

    .profile-section {
        margin-top: 30px;
        padding: 20px;
        background: #f9f9f9;
        border-radius: 8px;
        text-align: left;
    }
</style>

@if (!isLoggedIn) {
    <div class="login-container">
        <div class="login-box">
            <img src="https://sistemafieto.com.br/gestor/Repositorio/CRP.Sistema.PortalSistemaFIETO.SENAI.CursoSenai/638629619017479512.png" alt="Logo SENAI" class="senai-logo" />
            <h2 class="login-title">Entrar no Sistema</h2>
            <EditForm Model="@editor" OnValidSubmit="Entrar">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <InputText class="form-control login-input" placeholder="Matrícula" @bind-Value="editor.Matricula" />
                <ValidationMessage For="@(() => editor.Matricula)" />
                <InputText class="form-control login-input" placeholder="Nome" @bind-Value="editor.Nome" />
                <ValidationMessage For="@(() => editor.Nome)" />
                <button type="submit" class="login-btn">Entrar</button>
            </EditForm>
            @if (!string.IsNullOrEmpty(loginMensagem)) {
                <div class="alert alert-danger mt-2">@loginMensagem</div>
            }
            <a href="#" class="support-link" @onclick="MostrarAjuda">Precisa de ajuda?</a>
        </div>
    </div>
}
else {
    <div class="dashboard-container">
        <div class="dashboard-box">
            <h2>Bem-vindo, @editor.Nome!</h2>
            <div class="dashboard-cards">
                <div class="dashboard-card">
                    <strong>@docentes.Count</strong>
                    <div>Docentes Gerenciados</div>
                </div>
                <div class="dashboard-card">
                    <strong>2</strong>
                    <div>Solicitações Pendentes</div>
                </div>
                <div class="dashboard-card">
                    <strong>1</strong>
                    <div>Notificações</div>
                </div>
            </div>

            <h4>Docentes Gerenciados</h4>
            <table class="docentes-table">
                <thead>
                    <tr>
                        <th>Matrícula</th>
                        <th>Nome</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var d in docentes) {
                        <tr>
                            <td>@d.Matricula</td>
                            <td>
                                @if (editandoDocente == d) {
                                    <InputText class="form-control" @bind-Value="editandoNome" />
                                }
                                else {
                                    @d.Nome
                                }
                            </td>
                            <td>
                                @if (editandoDocente == d) {
                                    <button class="btn btn-sm btn-success" @onclick="SalvarEdicaoDocente">Salvar</button>
                                    <button class="btn btn-sm btn-secondary" @onclick="CancelarEdicaoDocente">Cancelar</button>
                                }
                                else {
                                    <button class="btn btn-sm btn-warning" @onclick="() => EditarDocente(d)">Editar</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => RemoverDocente(d)">Remover</button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="profile-section">
                <h5>Perfil do Editor</h5>
                <div><b>Matrícula:</b> @editor.Matricula</div>
                <div><b>Nome:</b> @editor.Nome</div>
                <button class="btn btn-secondary mt-2" @onclick="EditarPerfil">Editar Perfil</button>
                <button class="btn btn-outline-primary mt-2" @onclick="Logout">Sair</button>
            </div>

            <a href="#" class="support-link" @onclick="MostrarAjuda">Ajuda e Suporte</a>
        </div>
    </div>
}

@if (mostrarAjuda) {
    <div style="position:fixed;top:0;left:0;width:100vw;height:100vh;background:rgba(0,0,0,0.4);z-index:1000;display:flex;align-items:center;justify-content:center;">
        <div style="background:white;padding:30px;border-radius:10px;max-width:400px;text-align:center;">
            <h4>Ajuda e Suporte</h4>
            <p>Para dúvidas ou problemas, entre em contato com o suporte do sistema pelo e-mail <b>suporte@senai.com.br</b> ou procure a coordenação.</p>
            <button class="btn btn-primary" @onclick="() => mostrarAjuda = false">Fechar</button>
        </div>
    </div>
}

@code {
    // Estado de login
    private bool isLoggedIn = false;
    private string? loginMensagem;
    private bool mostrarAjuda = false;

    // Editor (usuário logado)
    private EditorModel editor = new();

    // Lista simulada de docentes gerenciados
    private List<DocenteModel> docentes = new()
    {
        new DocenteModel { Matricula = "12345", Nome = "Maria Silva" },
        new DocenteModel { Matricula = "67890", Nome = "João Souza" }
    };

    // Variáveis para edição inline
    private DocenteModel? editandoDocente;
    private string? editandoNome;

    // Login/registro simulado
    private void Entrar() {
        loginMensagem = string.Empty;
        if (string.IsNullOrWhiteSpace(editor.Matricula) || string.IsNullOrWhiteSpace(editor.Nome)) {
            loginMensagem = "Preencha todos os campos.";
            return;
        }
        isLoggedIn = true;
    }

    private void Logout() {
        isLoggedIn = false;
        editor = new();
        loginMensagem = string.Empty;
    }

    private void MostrarAjuda() {
        mostrarAjuda = true;
    }

    private void EditarPerfil() {
        mostrarAjuda = true; // Exemplo: mostra ajuda como placeholder
    }

    // Inicia edição do docente
    private void EditarDocente(DocenteModel docente) {
        editandoDocente = docente;
        editandoNome = docente.Nome;
    }

    // Salva a edição do docente
    private void SalvarEdicaoDocente() {
        if (editandoDocente != null && !string.IsNullOrWhiteSpace(editandoNome)) {
            editandoDocente.Nome = editandoNome;
        }
        editandoDocente = null;
        editandoNome = null;
    }

    // Cancela a edição
    private void CancelarEdicaoDocente() {
        editandoDocente = null;
        editandoNome = null;
    }

    private void RemoverDocente(DocenteModel docente) {
        docentes.Remove(docente);
    }

    public class EditorModel {
        [Required(ErrorMessage = "A matrícula é obrigatória.")]
        public string? Matricula { get; set; }

        [Required(ErrorMessage = "O nome é obrigatório.")]
        public string? Nome { get; set; }
    }

    public class DocenteModel {
        public string? Matricula { get; set; }
        public string? Nome { get; set; }
    }
}
